#
# Azure Pipelines configuration for building and testing create-react-app on Linux, Windows, and macOS.
#

trigger:
- master

variables:
  CI: true
  # Overrides the Yarn and NPM cache directories so they are on the same drive as the source. This helps improve build performance on Windows hosted agents.
  YARN_CACHE_FOLDER: $(Build.SourcesDirectory)/../yarn-cache
  NPM_CONFIG_CACHE: $(Build.SourcesDirectory)/../npm-cache
  # Sets TEMP to be on the same drive as the cloned source on Windows. This avoids test scripts that "cd" into a directory under TEMP from failing because this directory is on a different drive from the current directory.
  VSTS_OVERWRITE_TEMP: True
  # Override Verdaccio package to use. This is temoporary and is needed to avoid socket timeouts on hosted Windows agent (on Azure). This also changes Verdaccio to return a 503 (service unavailable) instead of a 404 (not found) when the connection to the uplink timesout.
  VERDACCIO_PACKAGE: https://github.com/willsmythe/verdaccio/releases/download/create-react-app/verdaccio-4.0.0-alpha.8.tgz

# ******************************************************************************
# Simple test suite
# ******************************************************************************
jobs:
- template: azure-pipelines-job.yml
  parameters:
    name: Simple
    testScript: tasks/e2e-simple.sh


# ******************************************************************************
# Installs test suite
# ******************************************************************************
- job: Installs
  strategy:
    matrix:
      #LinuxNode8:    { VM_IMAGE: 'ubuntu-16.04',   NODE_VERSION: 8.x }
      #LinuxNode10:   { VM_IMAGE: 'ubuntu-16.04',   NODE_VERSION: 10.x }
      #MacNode88:      { VM_IMAGE: 'macOS-10.13',    NODE_VERSION: 8.x }
      #MacNode810:     { VM_IMAGE: 'macOS-10.13',    NODE_VERSION: 10.x }
      WindowsNode8:  { VM_IMAGE: 'vs2017-win2016', NODE_VERSION: 8.x }
      WindowsNode10: { VM_IMAGE: 'vs2017-win2016', NODE_VERSION: 10.x }
  pool: 
    vmImage: $(VM_IMAGE)
  steps:
   # - template: azure-pipelines-steps.yml    
    - bash: tasks/e2e-installs.sh
      displayName: 'Run tests'

# ******************************************************************************
# Kitchensink test suite
# ******************************************************************************
- job: Kitchensink
  strategy:
    matrix:
      #LinuxNode8:    { VM_IMAGE: 'ubuntu-16.04',   NODE_VERSION: 8.x }
      #LinuxNode10:   { VM_IMAGE: 'ubuntu-16.04',   NODE_VERSION: 10.x }
      #MacNode88:      { VM_IMAGE: 'macOS-10.13',    NODE_VERSION: 8.x }
      #MacNode810:     { VM_IMAGE: 'macOS-10.13',    NODE_VERSION: 10.x }
      WindowsNode8:  { VM_IMAGE: 'vs2017-win2016', NODE_VERSION: 8.x }
      WindowsNode10: { VM_IMAGE: 'vs2017-win2016', NODE_VERSION: 10.x }
  pool: 
    vmImage: $(VM_IMAGE)
  steps:
  #  - template: azure-pipelines-steps.yml
    - bash: tasks/e2e-kitchensink.sh
      displayName: 'Run tests'

# ******************************************************************************
# Kitchensink Eject test suite
# ******************************************************************************
- job: KitchensinkEject
  strategy:
    matrix:
      #LinuxNode8:    { VM_IMAGE: 'ubuntu-16.04',   NODE_VERSION: 8.x }
      #LinuxNode10:   { VM_IMAGE: 'ubuntu-16.04',   NODE_VERSION: 10.x }
      #MacNode88:      { VM_IMAGE: 'macOS-10.13',    NODE_VERSION: 8.x }
      #MacNode810:     { VM_IMAGE: 'macOS-10.13',    NODE_VERSION: 10.x }
      WindowsNode8:  { VM_IMAGE: 'vs2017-win2016', NODE_VERSION: 8.x }
      WindowsNode10: { VM_IMAGE: 'vs2017-win2016', NODE_VERSION: 10.x }
  pool: 
    vmImage: $(VM_IMAGE)
  variables:
    TEST_SCRIPT: tasks/e2e-kitchensink-eject.sh
  steps:
 #   - template: azure-pipelines-steps.yml
    - bash: tasks/e2e-kitchensink-eject.sh
      displayName: 'Run tests'

# ******************************************************************************
# Behavior test suite
# ******************************************************************************
- job: Behavior
  strategy:
    matrix:
      #LinuxNode8:    { VM_IMAGE: 'ubuntu-16.04',   NODE_VERSION: 8.x }
      #LinuxNode10:   { VM_IMAGE: 'ubuntu-16.04',   NODE_VERSION: 10.x }
      #MacNode88:      { VM_IMAGE: 'macOS-10.13',    NODE_VERSION: 8.x }
      #MacNode810:     { VM_IMAGE: 'macOS-10.13',    NODE_VERSION: 10.x }
      WindowsNode8:  { VM_IMAGE: 'vs2017-win2016', NODE_VERSION: 8.x }
      WindowsNode10: { VM_IMAGE: 'vs2017-win2016', NODE_VERSION: 10.x }
  pool: 
    vmImage: $(VM_IMAGE)
  steps:
 #   - template: azure-pipelines-steps.yml
    - bash: tasks/e2e-behavior.sh
      displayName: 'Run tests'
    - script: |
        echo C:
        fsutil volume diskfree c:
        echo D:
        fsutil volume diskfree d:
      displayName: Show free disk space (Windows only)
      condition: and(always(), eq(variables['Agent.OS'], 'Windows_NT'))

# ******************************************************************************
# Old Node test suite
# ******************************************************************************
- job: OldNode
  strategy:
    matrix:
      #LinuxNode6:
      #  VM_IMAGE: 'ubuntu-16.04'
      #MacNode86:
      #  VM_IMAGE: 'macOS-10.13'
      WindowsNode6:
        VM_IMAGE: 'vs2017-win2016'
  pool: 
    vmImage: $(VM_IMAGE)
  steps:
    - task: NodeTool@0
      inputs:
        versionSpec: 6.x
      displayName: 'Install Node.js 6.x'
    - bash: tasks/e2e-old-node.sh
      displayName: 'Run tests'
